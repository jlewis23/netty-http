apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: "maven-publish"

group = 'io.cdap.http'
version = '1.5.0-SNAPSHOT'

description = "Netty based path router"

sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

def getVersion = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine './bin/version.sh'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }
}

ext {
    // S3 Maven repo setup.
    if (System.getenv("AWS_ACCESS_KEY_ID") != null && System.getenv("AWS_SECRET_ACCESS_KEY") != null) {
        ext.repo = {}
        ext.repo.accessKey = System.getenv("AWS_ACCESS_KEY_ID")
        ext.repo.secretKey = System.getenv("AWS_SECRET_ACCESS_KEY")
    } else {
        def awsKeyFile = "replace with aws key location"
        if (!awsKeyFile.exists()) {
            throw new FileNotFoundException(awsKeyFile.absolutePath)
        } else {
            Properties properties = new Properties()
            awsKeyFile.withInputStream { instr ->
                properties.load(instr)
            }
            ext.repo = properties
        }
    }
}

repositories {
        
     maven { url "https://repo.maven.apache.org/maven2" }
}

version = getVersion()

dependencies {
    compile fileTree(dir: "lib", includes: ['*.jar'])

    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version:'2.0'
    compile group: 'io.netty', name: 'netty-buffer', version:'4.1.50.Final'
    compile group: "io.netty", name: "netty-transport-native-epoll", version: "4.1.50.Final", classifier: "linux-x86_64"
    compile group: 'io.netty', name: 'netty-codec-http', version:'4.1.50.Final'
    compile group: 'io.netty', name: 'netty-handler', version:'4.1.50.Final'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.5'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version:'2.0.1'
    compile group: 'commons-beanutils', name: 'commons-beanutils-core', version:'1.8.3'
    testCompile group: 'junit', name: 'junit', version:'4.11'
    testCompile group: 'ch.qos.logback', name: 'logback-core', version:'1.0.9'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version:'1.0.9'
    testCompile group: 'com.google.code.gson', name: 'gson', version:'2.2.4'
}

idea {
    module {
        sourceDirs += file("${projectDir}/build/generated/source/apt/main")
        testSourceDirs += file("${projectDir}/build/generated/source/apt/test")
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives sourceJar
}

publishing {
    publications {
        projectName(MavenPublication) {
            groupId project.group
            artifactId "http"
            version project.version
            from project(":").components.java

            artifact project(":").sourceJar {
                classifier "sources"
            }
        }
    }

    repositories {
        maven {
            url "replace with s3 location for self repo"
            credentials(AwsCredentials) {
                accessKey repo.getProperty("accessKey")
                secretKey repo.getProperty("secretKey")
            }
        }
    }
}

wrapper {
    gradleVersion = "4.9"
    distributionType = "ALL"
}